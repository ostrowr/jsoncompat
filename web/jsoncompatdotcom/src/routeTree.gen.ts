/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsageRouteImport } from './routes/usage'
import { Route as InstallRouteImport } from './routes/install'
import { Route as FuzzerRouteImport } from './routes/fuzzer'
import { Route as CheckerRouteImport } from './routes/checker'
import { Route as IndexRouteImport } from './routes/index'

const UsageRoute = UsageRouteImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => rootRouteImport,
} as any)
const InstallRoute = InstallRouteImport.update({
  id: '/install',
  path: '/install',
  getParentRoute: () => rootRouteImport,
} as any)
const FuzzerRoute = FuzzerRouteImport.update({
  id: '/fuzzer',
  path: '/fuzzer',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckerRoute = CheckerRouteImport.update({
  id: '/checker',
  path: '/checker',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/checker': typeof CheckerRoute
  '/fuzzer': typeof FuzzerRoute
  '/install': typeof InstallRoute
  '/usage': typeof UsageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/checker': typeof CheckerRoute
  '/fuzzer': typeof FuzzerRoute
  '/install': typeof InstallRoute
  '/usage': typeof UsageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/checker': typeof CheckerRoute
  '/fuzzer': typeof FuzzerRoute
  '/install': typeof InstallRoute
  '/usage': typeof UsageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/checker' | '/fuzzer' | '/install' | '/usage'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/checker' | '/fuzzer' | '/install' | '/usage'
  id: '__root__' | '/' | '/checker' | '/fuzzer' | '/install' | '/usage'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CheckerRoute: typeof CheckerRoute
  FuzzerRoute: typeof FuzzerRoute
  InstallRoute: typeof InstallRoute
  UsageRoute: typeof UsageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/usage': {
      id: '/usage'
      path: '/usage'
      fullPath: '/usage'
      preLoaderRoute: typeof UsageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/install': {
      id: '/install'
      path: '/install'
      fullPath: '/install'
      preLoaderRoute: typeof InstallRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fuzzer': {
      id: '/fuzzer'
      path: '/fuzzer'
      fullPath: '/fuzzer'
      preLoaderRoute: typeof FuzzerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checker': {
      id: '/checker'
      path: '/checker'
      fullPath: '/checker'
      preLoaderRoute: typeof CheckerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CheckerRoute: CheckerRoute,
  FuzzerRoute: FuzzerRoute,
  InstallRoute: InstallRoute,
  UsageRoute: UsageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
